# === chapter_meta.json ===
{
  "type": "object",
  "properties": {
    "status": { "type": "string" },
    "print": { "type": "string" }
  }
}


# === content_schema.json ===
{
  "type": "object",
  "properties": {
    "lang": { "type": "string" },
    "audience": { "type": "string", "enum": ["POP", "SCI", "INT"] },
    "version": { "type": "string" },
    "main": { "type" : "string"},
    "status": { "type" : "string"}
  }
}


# === beispielbaum.json ===
{
  "id": "root",
  "title": "Beispielstruktur",
  "contents": [],
  "children": [
    {
      "id": "kap1",
      "title": "Kapitel 1",
      "contents": [
        {
          "content_type": "text",
          "title": "Einleitung",
          "data": {
            "text": "Dies ist die Einleitung zu Kapitel 1."
          },
          "renderer": "text_blocks",
          "metadata": {
            "lang": "DE",
            "audience": "POP",
            "version": "1.0"
          }
        },
        {
          "content_type": "text",
          "title": "Fazit",
          "data": {
            "text": "Das war das Wichtigste aus Kapitel 1."
          },
          "renderer": "text_blocks",
          "metadata": {
            "lang": "DE",
            "audience": "SCI",
            "version": "1.0"
          }
        }
      ],
      "children": [],
      "metadata": {
        "status": "",
        "print": ""
      }
    }
  ],
  "metadata": {}
}

# === metadata_model.py ===
# metadata_model.py

from typing import Any, Dict, Optional


class Metadata:
    def __init__(self, data: Optional[Dict[str, Any]] = None, schema: Optional[Dict[str, Any]] = None):
        self.data = data or {}
        self.schema = schema or {}

    def get(self, key: str, default=None) -> Any:
        return self.data.get(key, default)

    def set(self, key: str, value: Any):
        self.data[key] = value

    def to_dict(self) -> Dict[str, Any]:
        return dict(self.data)

    def update_from_dict(self, updates: Dict[str, Any]):
        self.data.update(updates)

    def keys(self):
        return self.data.keys()

    def validate(self):
        # TODO: Später → optional mit jsonschema.validate(self.data, self.schema)
        pass


